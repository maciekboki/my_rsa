#-*- coding: utf-8 -*-

import random

def generuj_liczbe_nieparzysta(n):
    '''Funkcja generuje liczbę NIEPARZYSTĄ o długości 'n' bitów,
       (jeśli chcemy wygenerować np. liczbę 9 cyfrowa to n podajemy 9... itd.)
       liczba będzie kandydatem to testów pierwszości, np systemem Millera-Rabina
       The function generates an ODD number of length 'n' bits,
       (if we want to generate e.g. a 9-digit number then n must be 9... e.t.c)
       the number will be a candidate for primacy tests, e.g. the Miller-Rabbi system
    '''
    zakres_start = 10**(n-1)
    zakres_koniec = (10**n)-1
    liczba = 0
    while liczba % 2 == 0:
        liczba = random.randint(zakres_start, zakres_koniec)
        continue
    return liczba

def testPrime_rabinMiller(n):
    '''Implementacja testu pierwszości Millera-Rabina,
       dla liczb pierwszych 2 i 3 test od razu zwraca wartość True,
       dla pozostałych jest wykonywany test zgodnie z zasadami:
       https://pl.wikipedia.org/wiki/Test_Millera-Rabina
       Implementation of the Miller-Rabin primacy test,
       for primes 2 and 3, the test immediately returns True,
       for the others, the test is carried out in accordance with the rules:
       https://en.wikipedia.org/wiki/Miller–Rabin_primality_test
    '''
    if n == 3 or n == 2:
        return True
    else:
        s = n-1
        count = 0
        while  s % 2 == 0:
            s = s // 2
            count += 1
    
        for i in range(5):
            losowa_liczba = random.randrange(2, n-1)
            z = pow(losowa_liczba, s, n)
            if z != 1:
                j = 0
                while z != (n-1):
                    if j == count - 1:
                        return False
                    else:
                        j = j + 1
                        z = (z ** 2) % n
        return True

def generuj_prime(n):
    '''Funkcja zwraca liczbę, która uzyskała pozytywny wynik testu pierwszości testem Millera-Rabina,
       liczba generowana jest funkcją generuj_liczbe_nieparzysta(n) następnie liczba poddawana jest testowi
       na pierwszość funkcją testPrime_rabinMiller(n) test powtarzany jest do momentu aż liczba 'kandydat'
       nie uzyska pozytywnego wyniku testu.
       The function returns a number which has obtained a positive result of the primacy test using the Miller-Rabin test,
       the number is generated by the function generuj_liczbe_nieparzysta(n) then the number is subjected to the test for priority
       by the function testPrime_rabinMiller(n) the test is repeated until the number 'candidate' receives a positive test result.
    '''
    test = False
    while test == False:
        liczba = generuj_liczbe_nieparzysta(n)
        print("Sprawdzam... " + str(liczba))
        test = testPrime_rabinMiller(liczba)
    return liczba
